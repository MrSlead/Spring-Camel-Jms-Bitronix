<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context" xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:jdbc="http://www.springframework.org/schema/jdbc"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.1.xsd
	 http://camel.apache.org/schema/spring http://camel.apache.org/schema/spring/camel-spring.xsd http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd http://www.springframework.org/schema/jdbc http://www.springframework.org/schema/jdbc/spring-jdbc.xsd">

    <!-- DATABASE SUPPORT -->
    <jdbc:embedded-database id="H2DB" type="H2">
        <jdbc:script location="classpath:db/schema.sql"/>
    </jdbc:embedded-database>

    <bean id="dataSource" class="bitronix.tm.resource.jdbc.PoolingDataSource"
          init-method="init" destroy-method="close">
        <property name="className" value="bitronix.tm.resource.jdbc.lrc.LrcXADataSource"/>
        <property name="uniqueName" value="h2database"/>
        <property name="maxPoolSize" value="5"/>
        <property name="minPoolSize" value="0"/>
        <property name="allowLocalTransactions" value="false"/>
        <property name="driverProperties">
            <props>
                <prop key="user">sa</prop>
                <prop key="password"></prop>
                <prop key="url">jdbc:h2:mem:H2DB;DB_CLOSE_DELAY=-1;DB_CLOSE_ON_EXIT=false</prop>
                <prop key="driverClassName">org.h2.Driver</prop>
            </props>
        </property>
    </bean>

    <bean id="jdbcTemplate" class="org.springframework.jdbc.core.JdbcTemplate">
        <property name="dataSource" ref="dataSource"/>
    </bean>
    <!-- -->

    <!-- BITRONIX -->
    <!-- create BTM config -->
    <bean id="btmConfig" factory-method="getConfiguration" class="bitronix.tm.TransactionManagerServices">
        <property name="serverId" value="btx-server"/>
        <property name="logPart1Filename" value="./tx-logs/part1.btm"/>
        <property name="logPart2Filename" value="./tx-logs/part2.btm"/>
    </bean>

    <!-- create BTM transaction manager -->
    <bean id="bitronixTransactionManager" factory-method="getTransactionManager"
          class="bitronix.tm.TransactionManagerServices"
          depends-on="btmConfig" destroy-method="shutdown"/>

    <bean id="transactionManager" class="org.springframework.transaction.jta.JtaTransactionManager">
        <property name="userTransaction" ref="bitronixTransactionManager"/>
        <property name="transactionManager" ref="bitronixTransactionManager"/>
    </bean>
    <!-- -->

    <!-- JMS -->
    <bean id="pooledJmsXaConnectionFactory" class="bitronix.tm.resource.jms.PoolingConnectionFactory" init-method="init" destroy-method="close" >
        <property name="className" value="org.apache.activemq.ActiveMQXAConnectionFactory"/>
        <property name="uniqueName" value="activemq"/>
        <property name="maxPoolSize" value="8"/>
        <property name="allowLocalTransactions" value="false"/>
        <property name="driverProperties">
            <props>
                <prop key="brokerURL">${brokerUrl}</prop>
            </props>
        </property>
    </bean>

    <bean id="jmsTemplate" class="org.springframework.jms.core.JmsTemplate">
        <property name="connectionFactory" ref="pooledJmsXaConnectionFactory"/>
    </bean>

    <bean id="jmsContainer"
          class="org.springframework.jms.listener.DefaultMessageListenerContainer">
        <property name="connectionFactory" ref="pooledJmsXaConnectionFactory"/>
        <property name="destinationName" value="${destination.valid.type}"/>
        <property name="messageListener" ref="jmsFileListener"/>
        <property name="transactionManager" ref="transactionManager"/>
    </bean>

    <!-- JAVA CODE -->
    <camelContext id="camelContext" xmlns="http://camel.apache.org/schema/spring">
        <routeBuilder ref="myRoute"/>
    </camelContext>

    <!--camelContext id="camelContext" xmlns="http://camel.apache.org/schema/spring">
        <route>
            <from uri="file:data?noop=true"/>
            <transacted />
                <choice>
                    <when>
                        <simple>${header.CamelFileName} regex '^.*xml$'</simple>
                        <process ref="taskProcessor" />
                        <to uri="activemq:queue:${destinationJms}" />
                    </when>

                    <when>
                        <simple>${header.CamelFileName} regex '^.*txt$'</simple>
                        <process ref="taskProcessor" />
                        <bean ref="H2Repo" method="writeInDB" />
                        <to uri="activemq:queue:${destinationJms}" />
                    </when>

                    <otherwise>
                        <process ref="taskProcessor" />
                        <to uri="activemq:queue:invalid-queue" />
                    </otherwise>
                </choice>

                <choice>
                    <when>
                        <simple>${header.to} != 'null'</simple>
                        <to uri="smtps://smtp.gmail.com:465?username=${email.username}&amp;password=${email.password}" />
                    </when>
                </choice>
        </route>
    </camelContext-->

    <bean id="taskProcessor" class="com.almod.camel.TaskProcessor"/>

    <bean id="h2Service" class="com.almod.db.H2ServiceImpl">
        <constructor-arg name="jdbcTemplate" ref="jdbcTemplate"/>
    </bean>

    <bean id="myRoute" class="com.almod.camel.MyRoute">
        <property name="h2Service" ref="h2Service"/>
        <property name="taskProcessor" ref="taskProcessor"/>
    </bean>

    <bean id="mailSender" class="com.almod.util.EmailSender"/>

    <bean id="jmsFileListener" class="com.almod.jms.JmsFileListener"/>

    <bean id="emailConfig" class="com.almod.util.EmailConfig">
        <constructor-arg name="emailFromUsername" value="${email.from.username}"/>
        <constructor-arg name="emailFromPassword" value="${email.from.password}"/>
        <constructor-arg name="emailHostName" value="${mail.smtp.host}"/>
        <constructor-arg name="emailHostPort" value="${mail.smtp.port}"/>
        <constructor-arg name="emailHostSSLEnable" value="${mail.smtp.ssl.enable}"/>
        <constructor-arg name="emailHostAuth" value="${mail.smtp.auth}"/>
    </bean>

    <context:component-scan base-package="com.almod"/>
    <context:property-placeholder location="application.properties"/>
    <tx:annotation-driven/>
</beans>
